name: 'Manual Glicko Pipeline Run 🚀'

on:
  workflow_dispatch:
    inputs:
      first_month:
        description: 'First month to process (YYYY-MM format)'
        required: true
        default: '2025-09'
      last_month:
        description: 'Last month to process (YYYY-MM format)'
        required: true
        default: '2025-09'
      task_cpu:
        description: 'CPU units (1024 = 1 vCPU)'
        required: false
        default: '1024'
      task_memory:
        description: 'Memory in MiB'
        required: false
        default: '2048'
      pipeline_mode:
        description: 'Pipeline mode to run'
        required: false
        default: 'full'
        type: choice
        options:
        - 'full'
        - 'post_scraping'
        - 'glicko_only'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  PROJECT_NAME: chess-glicko

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: '🔑 Configure AWS Credentials'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: '✅ Validate Inputs'
      id: validation
      run: |
        timestamp() {
          date -u +"%Y-%m-%d %H:%M:%S"
        }
        
        echo "✅ [$(timestamp)] Validating input month formats..."
        
        if [[ ! "${{ github.event.inputs.first_month }}" =~ ^[0-9]{4}-[0-9]{2}$ ]]; then
          echo "❌ [$(timestamp)] ERROR: First month ('${{ github.event.inputs.first_month }}') must be in YYYY-MM format."
          exit 1
        fi
        
        if [[ ! "${{ github.event.inputs.last_month }}" =~ ^[0-9]{4}-[0-9]{2}$ ]]; then
          echo "❌ [$(timestamp)] ERROR: Last month ('${{ github.event.inputs.last_month }}') must be in YYYY-MM format."
          exit 1
        fi
        
        if [[ "${{ github.event.inputs.first_month }}" > "${{ github.event.inputs.last_month }}" ]]; then
          echo "❌ [$(timestamp)] ERROR: First month must be less than or equal to last month."
          exit 1
        fi
        
        echo "👍 [$(timestamp)] Inputs are valid."

    - name: '🗓️ Generate Month Range'
      id: months
      run: |
        timestamp() {
          date -u +"%Y-%m-%d %H:%M:%S"
        }
        
        echo "⏳ [$(timestamp)] Generating month range from ${{ github.event.inputs.first_month }} to ${{ github.event.inputs.last_month }}..."
        
        start_date="${{ github.event.inputs.first_month }}-01"
        end_date="${{ github.event.inputs.last_month }}-01"
        
        months_list=""
        current_date="$start_date"
        
        while [[ "$current_date" < "$(date -d "$end_date +1 month" +%Y-%m-%d)" ]]; do
          month_str=$(date -d "$current_date" +%Y-%m)
          months_list="$months_list $month_str"
          current_date=$(date -d "$current_date +1 month" +%Y-%m-%d)
        done
        
        # Trim leading space
        months_list=$(echo "$months_list" | sed 's/^ *//g')
        
        month_count=$(echo "$months_list" | wc -w)
        
        echo "MONTHS=${months_list}" >> $GITHUB_OUTPUT
        echo "MONTH_COUNT=${month_count}" >> $GITHUB_OUTPUT
        
        echo "✅ [$(timestamp)] Generated ${month_count} months to process: ${months_list}"

    - name: '🏗️ Get Infrastructure Details'
      id: infra
      run: |
        timestamp() {
          date -u +"%Y-%m-%d %H:%M:%S"
        }
        
        echo "🔎 [$(timestamp)] Fetching AWS infrastructure details..."
        
        # Get cluster name
        CLUSTER_NAME=$(aws ecs list-clusters --query "clusterArns[?contains(@, '${{ env.PROJECT_NAME }}')]" --output text | cut -d'/' -f2)
        if [ -z "$CLUSTER_NAME" ]; then
          echo "⚠️ [$(timestamp)] No cluster found with project name, using default: chess-glicko-cluster"
          CLUSTER_NAME="chess-glicko-cluster"
        fi
        echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        echo "  -> [$(timestamp)] Using cluster: $CLUSTER_NAME"
        
        # Get task definition
        TASK_DEF=$(aws ecs list-task-definitions --family-prefix ${{ env.PROJECT_NAME }} --sort DESC --max-items 1 --query 'taskDefinitionArns[0]' --output text)
        if [ -z "$TASK_DEF" ] || [ "$TASK_DEF" = "None" ]; then
          echo "❌ [$(timestamp)] ERROR: No task definition found for project '${{ env.PROJECT_NAME }}'. Aborting."
          exit 1
        fi
        echo "task_definition=$TASK_DEF" >> $GITHUB_OUTPUT
        echo "  -> [$(timestamp)] Using task definition: $TASK_DEF"
        
        # Get S3 bucket name
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        S3_BUCKET_NAME="${{ env.PROJECT_NAME }}-data-$ACCOUNT_ID"
        echo "s3_bucket_name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
        echo "  -> [$(timestamp)] Using S3 bucket: $S3_BUCKET_NAME"
        
        # Get network configuration
        VPC_ID=$(aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true' --query 'Vpcs[0].VpcId' --output text)
        SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0:3].SubnetId' --output text | tr '\t' ',')
        echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
        echo "  -> [$(timestamp)] Using subnets: $SUBNET_IDS"
        
        # Get security group
        SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=chess-glicko-ecs-tasks" "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null)
        if [ -z "$SG_ID" ] || [ "$SG_ID" = "None" ]; then
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=default" "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[0].GroupId' --output text)
          echo "⚠️ [$(timestamp)] Using default security group: $SG_ID"
        else
          echo "  -> [$(timestamp)] Using project security group: $SG_ID"
        fi
        echo "security_group_id=$SG_ID" >> $GITHUB_OUTPUT

    - name: '🚀 Trigger ECS Pipeline Tasks'
      id: pipeline_run
      env:
        CLUSTER_NAME: ${{ steps.infra.outputs.cluster_name }}
        TASK_DEFINITION: ${{ steps.infra.outputs.task_definition }}
        S3_BUCKET_NAME: ${{ steps.infra.outputs.s3_bucket_name }}
        SUBNET_IDS: ${{ steps.infra.outputs.subnet_ids }}
        SECURITY_GROUP_ID: ${{ steps.infra.outputs.security_group_id }}
        MONTHS: ${{ steps.months.outputs.months }}
        MONTH_COUNT: ${{ steps.months.outputs.month_count }}
      run: |
        # --- Logging Helpers ---
        NC='\033[0m'
        GREEN='\033[0;32m'
        YELLOW='\033[0;33m'
        RED='\033[0;31m'
        BLUE='\033[0;34m'
        
        log() {
            echo -e "[$(date -u +"%Y-%m-%d %H:%M:%S")] $1"
        }
        
        # --- Print Run Summary ---
        log "${BLUE}🔷 Starting Pipeline Run 🔷${NC}"
        log "   Mode:           ${{ github.event.inputs.pipeline_mode }}"
        log "   Date Range:     ${{ github.event.inputs.first_month }} to ${{ github.event.inputs.last_month }} (${MONTH_COUNT} months)"
        log "   Task CPU:       ${{ github.event.inputs.task_cpu }}"
        log "   Task Memory:    ${{ github.event.inputs.task_memory }}"
        log "   Cluster:        ${CLUSTER_NAME}"
        log "   Task Def:       ${TASK_DEFINITION}"
        log "-----------------------------------------------------"
        
        # --- Logic for glicko_only mode (single task) ---
        if [ "${{ github.event.inputs.pipeline_mode }}" = "glicko_only" ]; then
            log "⚙️ Running in 'glicko_only' mode. A single ECS task will process all months."
            
            TASK_ARN=$(aws ecs run-task \
              --cluster $CLUSTER_NAME \
              --task-definition $TASK_DEFINITION \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],assignPublicIp=ENABLED,securityGroups=[$SECURITY_GROUP_ID]}" \
              --overrides "{\"containerOverrides\":[{\"name\":\"chess-glicko\",\"command\":[\"run-glicko\",\"--first-month\",\"${{ github.event.inputs.first_month }}\",\"--last-month\",\"${{ github.event.inputs.last_month }}\"],\"environment\":[{\"name\":\"S3_BUCKET\",\"value\":\"$S3_BUCKET_NAME\"}]}],\"cpu\":\"${{ github.event.inputs.task_cpu }}\",\"memory\":\"${{ github.event.inputs.task_memory }}\"}" \
              --query 'tasks[0].taskArn' --output text)
              
            if [ -z "$TASK_ARN" ] || [ "$TASK_ARN" = "None" ]; then
                log "${RED}❌ FAILED to start 'glicko_only' ECS task.${NC}"
                echo "failed_months=${MONTHS}" >> $GITHUB_OUTPUT
                exit 1
            fi
            
            log "${GREEN}✅ Task started successfully! ARN: $TASK_ARN${NC}"
            log "   Watch logs at: https://${AWS_REGION}.console.aws.amazon.com/cloudwatch/home?region=${AWS_REGION}#logsV2:log-groups/log-group/%252Fecs%252F${PROJECT_NAME}"
            echo "task_arns=$TASK_ARN" >> $GITHUB_OUTPUT
            
            # --- Wait for task completion ---
            log "⏳ Waiting for task to complete (polling every 30s)..."
            aws ecs wait tasks-stopped --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN"
            
            # --- Check final status ---
            log " inspecting final task status..."
            EXIT_CODE=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN" --query 'tasks[0].containers[0].exitCode' --output text)
            
            if [ "$EXIT_CODE" = "0" ]; then
                log "${GREEN}✅ 'glicko_only' task completed successfully!${NC}"
                echo "successful_months=${MONTHS}" >> $GITHUB_OUTPUT
            else
                STOP_REASON=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN" --query 'tasks[0].stoppedReason' --output text)
                log "${RED}❌ Task FAILED with exit code: $EXIT_CODE${NC}"
                log "${RED}   Reason: $STOP_REASON${NC}"
                echo "failed_months=${MONTHS}" >> $GITHUB_OUTPUT
                exit 1
            fi
        
        # --- Logic for per-month modes ---
        else
            log "⚙️ Running in '${{ github.event.inputs.pipeline_mode }}' mode. One ECS task will be launched per month."
            SUCCESSFUL_MONTHS=""
            FAILED_MONTHS=""
            ALL_TASK_ARNS=""
            CURRENT_MONTH_NUM=1
            
            for MONTH in $MONTHS; do
                log "${BLUE}--- Processing Month ${CURRENT_MONTH_NUM} of ${MONTH_COUNT}: ${MONTH} ---${NC}"
                
                TASK_ARN=$(aws ecs run-task \
                  --cluster $CLUSTER_NAME \
                  --task-definition $TASK_DEFINITION \
                  --launch-type FARGATE \
                  --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],assignPublicIp=ENABLED,securityGroups=[$SECURITY_GROUP_ID]}" \
                  --overrides "{\"containerOverrides\":[{\"name\":\"chess-glicko\",\"environment\":[{\"name\":\"PROCESS_MONTH\",\"value\":\"$MONTH\"},{\"name\":\"PIPELINE_MODE\",\"value\":\"${{ github.event.inputs.pipeline_mode }}\"},{\"name\":\"S3_BUCKET\",\"value\":\"$S3_BUCKET_NAME\"}]}],\"cpu\":\"${{ github.event.inputs.task_cpu }}\",\"memory\":\"${{ github.event.inputs.task_memory }}\"}" \
                  --query 'tasks[0].taskArn' --output text)

                if [ -z "$TASK_ARN" ] || [ "$TASK_ARN" = "None" ]; then
                    log "${RED}❌ FAILED to start ECS task for ${MONTH}.${NC}"
                    FAILED_MONTHS="$FAILED_MONTHS $MONTH"
                    continue
                fi
                
                log "${GREEN}✅ Task started for ${MONTH}! ARN: $TASK_ARN${NC}"
                ALL_TASK_ARNS="$ALL_TASK_ARNS $TASK_ARN"
                
                # --- Wait for task completion ---
                log "⏳ Waiting for task to complete..."
                aws ecs wait tasks-stopped --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN"
                
                # --- Check final status ---
                log " inspecting final task status for ${MONTH}..."
                EXIT_CODE=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN" --query 'tasks[0].containers[0].exitCode' --output text)

                if [ "$EXIT_CODE" = "0" ]; then
                    log "${GREEN}✅ Task for ${MONTH} completed successfully!${NC}"
                    SUCCESSFUL_MONTHS="$SUCCESSFUL_MONTHS $MONTH"
                else
                    STOP_REASON=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN" --query 'tasks[0].stoppedReason' --output text)
                    log "${RED}❌ Task for ${MONTH} FAILED with exit code: $EXIT_CODE${NC}"
                    log "${RED}   Reason: $STOP_REASON${NC}"
                    FAILED_MONTHS="$FAILED_MONTHS $MONTH"
                fi
                CURRENT_MONTH_NUM=$((CURRENT_MONTH_NUM + 1))
            done
            
            echo "task_arns=$(echo $ALL_TASK_ARNS | sed 's/^ *//g')" >> $GITHUB_OUTPUT
            echo "successful_months=$(echo $SUCCESSFUL_MONTHS | sed 's/^ *//g')" >> $GITHUB_OUTPUT
            echo "failed_months=$(echo $FAILED_MONTHS | sed 's/^ *//g')" >> $GITHUB_OUTPUT
            
            if [[ -n "$FAILED_MONTHS" ]]; then
                log "${RED}One or more months failed processing.${NC}"
                exit 1
            fi
        fi

    - name: '📊 Post-Run Summary'
      if: always() # This step runs even if the previous step fails
      run: |
        SUCCESSFUL_MONTHS="${{ steps.pipeline_run.outputs.successful_months }}"
        FAILED_MONTHS="${{ steps.pipeline_run.outputs.failed_months }}"
        
        SUCCESS_COUNT=$(echo "$SUCCESSFUL_MONTHS" | wc -w)
        FAIL_COUNT=$(echo "$FAILED_MONTHS" | wc -w)
        
        echo "## 🏁 Glicko Pipeline Run Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ $FAIL_COUNT -eq 0 && $SUCCESS_COUNT -gt 0 ]]; then
            echo "### ✅ All months processed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "**${SUCCESS_COUNT} successful months:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$SUCCESSFUL_MONTHS" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        elif [[ $FAIL_COUNT -gt 0 ]]; then
            echo "### ❌ The pipeline run failed for one or more months." >> $GITHUB_STEP_SUMMARY
            echo "**${FAIL_COUNT} failed months:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$FAILED_MONTHS" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            if [[ $SUCCESS_COUNT -gt 0 ]]; then
              echo "**${SUCCESS_COUNT} successful months:**" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "$SUCCESSFUL_MONTHS" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
            # This is needed to ensure the overall workflow status is 'failure'
            exit 1
        else
            echo "### ❓ The pipeline run finished with an inconclusive status." >> $GITHUB_STEP_SUMMARY
            echo "Please review the logs for details." >> $GITHUB_STEP_SUMMARY
        fi