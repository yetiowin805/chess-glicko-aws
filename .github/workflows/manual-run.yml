name: Manual Glicko Pipeline Run

on:
  workflow_dispatch:
    inputs:
      month:
        description: 'Month to process (YYYY-MM format)'
        required: true
        default: '2024-01'
      task_cpu:
        description: 'CPU units (1024 = 1 vCPU)'
        required: false
        default: '1024'
      task_memory:
        description: 'Memory in MiB'
        required: false
        default: '2048'
      pipeline_mode:
        description: 'Pipeline mode to run'
        required: false
        default: 'full'
        type: choice
        options:
        - 'full'
        - 'post_scraping'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  PROJECT_NAME: chess-glicko

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Validate Month Format
      run: |
        if [[ ! "${{ github.event.inputs.month }}" =~ ^[0-9]{4}-[0-9]{2}$ ]]; then
          echo "Error: Month must be in YYYY-MM format"
          exit 1
        fi

    - name: Get Infrastructure Details
      id: infra
      run: |
        echo "=== Getting Infrastructure Details ==="
        
        # Get cluster name
        CLUSTER_NAME=$(aws ecs list-clusters \
          --query "clusterArns[?contains(@, '${{ env.PROJECT_NAME }}')]" \
          --output text | cut -d'/' -f2)
        
        if [ -z "$CLUSTER_NAME" ]; then
          echo "‚ö†Ô∏è  No cluster found with project name, using default: chess-glicko-cluster"
          CLUSTER_NAME="chess-glicko-cluster"
        fi
        echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        echo "Using cluster: $CLUSTER_NAME"
        
        # Get task definition
        TASK_DEF=$(aws ecs list-task-definitions \
          --family-prefix ${{ env.PROJECT_NAME }} \
          --sort DESC \
          --max-items 1 \
          --query 'taskDefinitionArns[0]' \
          --output text | cut -d'/' -f2 | cut -d':' -f1)
        
        if [ -z "$TASK_DEF" ] || [ "$TASK_DEF" = "None" ]; then
          echo "‚ö†Ô∏è  No task definition found with project name, using default: chess-glicko-task"
          TASK_DEF="chess-glicko-task"
        fi
        echo "task_definition=$TASK_DEF" >> $GITHUB_OUTPUT
        echo "Using task definition: $TASK_DEF"
        
        # Get S3 bucket name
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        S3_BUCKET_NAME="${{ env.PROJECT_NAME }}-data-$ACCOUNT_ID"
        echo "s3_bucket_name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
        echo "Using S3 bucket: $S3_BUCKET_NAME"
        
        # Get network configuration - multiple subnets for better availability
        SUBNET_IDS=$(aws ec2 describe-subnets \
          --filters "Name=vpc-id,Values=$(aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true' --query 'Vpcs[0].VpcId' --output text)" \
          --query 'Subnets[0:3].SubnetId' \
          --output text | tr '\t' ',')
        echo "subnet_ids=$SUBNET_IDS" >> $GITHUB_OUTPUT
        echo "Using subnets: $SUBNET_IDS"
        
        # Get security group
        SG_ID=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=chess-glicko-ecs-tasks" \
          --query 'SecurityGroups[0].GroupId' \
          --output text 2>/dev/null || echo "")
        
        if [ -z "$SG_ID" ] || [ "$SG_ID" = "None" ]; then
          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=default" \
            --query 'SecurityGroups[0].GroupId' \
            --output text)
          echo "‚ö†Ô∏è  Using default security group: $SG_ID"
        else
          echo "Using project security group: $SG_ID"
        fi
        echo "security_group_id=$SG_ID" >> $GITHUB_OUTPUT

    - name: Run Pipeline Task
      env:
        CLUSTER_NAME: ${{ steps.infra.outputs.cluster_name }}
        TASK_DEFINITION: ${{ steps.infra.outputs.task_definition }}
        S3_BUCKET_NAME: ${{ steps.infra.outputs.s3_bucket_name }}
        SUBNET_IDS: ${{ steps.infra.outputs.subnet_ids }}
        SECURITY_GROUP_ID: ${{ steps.infra.outputs.security_group_id }}
      run: |
        echo "=== Running ${{ github.event.inputs.pipeline_mode }} Pipeline ==="
        echo "Month: ${{ github.event.inputs.month }}"
        echo "Mode: ${{ github.event.inputs.pipeline_mode }}"
        echo "CPU: ${{ github.event.inputs.task_cpu }}"
        echo "Memory: ${{ github.event.inputs.task_memory }}"
        echo "Cluster: $CLUSTER_NAME"
        echo "Task Definition: $TASK_DEFINITION"
        echo "S3 Bucket: $S3_BUCKET_NAME"
        echo "Subnets: $SUBNET_IDS"
        echo "Security Group: $SECURITY_GROUP_ID"
        
        # Prepare pipeline mode description
        if [ "${{ github.event.inputs.pipeline_mode }}" = "full" ]; then
          echo "üìä Full pipeline will run all steps:"
          echo "  - Download data archives"
          echo "  - Extract and process games"
          echo "  - Calculate Glicko ratings"
          echo "  - Upload results to S3"
          echo "  ‚ö†Ô∏è  Expected duration: 15-20 minutes"
        else
          echo "üìä Post-scraping pipeline will run:"
          echo "  - Process calculation data"
          echo "  - Calculate Glicko ratings"
          echo "  - Upload results to S3"
          echo "  ‚ö†Ô∏è  Expected duration: 2-5 minutes"
        fi
        echo ""
        
        # Run the task
        echo "Starting pipeline task..."
        TASK_ARN=$(aws ecs run-task \
          --cluster $CLUSTER_NAME \
          --task-definition $TASK_DEFINITION \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],assignPublicIp=ENABLED,securityGroups=[$SECURITY_GROUP_ID]}" \
          --overrides "{
            \"taskRoleArn\": \"$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query 'taskDefinition.taskRoleArn' --output text)\",
            \"cpu\": \"${{ github.event.inputs.task_cpu }}\",
            \"memory\": \"${{ github.event.inputs.task_memory }}\",
            \"containerOverrides\": [{
              \"name\": \"chess-glicko\",
              \"environment\": [{
                \"name\": \"PROCESS_MONTH\",
                \"value\": \"${{ github.event.inputs.month }}\"
              }, {
                \"name\": \"PIPELINE_MODE\",
                \"value\": \"${{ github.event.inputs.pipeline_mode }}\"
              }, {
                \"name\": \"S3_BUCKET\",
                \"value\": \"$S3_BUCKET_NAME\"
              }]
            }]
          }" \
          --query 'tasks[0].taskArn' \
          --output text)
        
        if [ -n "$TASK_ARN" ] && [ "$TASK_ARN" != "None" ]; then
          echo "‚úÖ Pipeline task started successfully!"
          echo "Task ARN: $TASK_ARN"
          echo ""
          
          # Wait and check initial status
          echo "‚è≥ Checking initial task status..."
          sleep 15
          TASK_STATUS=$(aws ecs describe-tasks \
            --cluster "$CLUSTER_NAME" \
            --tasks "$TASK_ARN" \
            --query 'tasks[0].lastStatus' \
            --output text)
          echo "Task status after 15 seconds: $TASK_STATUS"
          
          # Check if task failed to start
          if [ "$TASK_STATUS" = "STOPPED" ]; then
            echo "‚ùå Task stopped unexpectedly. Checking for errors..."
            aws ecs describe-tasks \
              --cluster "$CLUSTER_NAME" \
              --tasks "$TASK_ARN" \
              --query 'tasks[0].stoppedReason' \
              --output text
            exit 1
          fi
          
          echo ""
          echo "üìä Monitor progress:"
          echo "  - Task status: aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN"
          echo "  - Logs: aws logs tail /ecs/${{ env.PROJECT_NAME }} --follow"
          echo ""
          echo "üîó AWS Console Links:"
          echo "  - ECS Task: https://console.aws.amazon.com/ecs/home?region=${{ env.AWS_REGION }}#/clusters/$CLUSTER_NAME/tasks"
          echo "  - CloudWatch Logs: https://console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#logsV2:log-groups/log-group/%2Fecs%2F${{ env.PROJECT_NAME }}"
          echo ""
          if [ "${{ github.event.inputs.pipeline_mode }}" = "full" ]; then
            echo "üí° Full pipeline typically takes 15-20 minutes. Check logs for progress updates."
          else
            echo "üí° Post-scraping pipeline typically takes 2-5 minutes. Check logs for progress updates."
          fi
        else
          echo "‚ùå Failed to start pipeline task"
          echo "Task ARN: '$TASK_ARN'"
          exit 1
        fi